diff --git a/Makefile.in b/Makefile.in
index f3aa67e..5b73c77 100644
--- a/Makefile.in
+++ b/Makefile.in
@@ -1511,13 +1511,13 @@ AUTOMAKE = @AUTOMAKE@
 AWK = @AWK@
 CC = @CC@
 CCDEPMODE = @CCDEPMODE@
-CFLAGS = @CFLAGS@
+CFLAGS = @CFLAGS@ -DBUILD_FOR_RUBY -fPIC
 CPP = @CPP@
 CPPFLAGS = @CPPFLAGS@
 CXX = @CXX@
 CXXCPP = @CXXCPP@
 CXXDEPMODE = @CXXDEPMODE@
-CXXFLAGS = @CXXFLAGS@
+CXXFLAGS = @CXXFLAGS@ -DBUILD_FOR_RUBY -fPIC
 CYGPATH_W = @CYGPATH_W@
 DEFS = @DEFS@
 DEPDIR = @DEPDIR@
diff --git a/src/profile-handler.cc b/src/profile-handler.cc
index 700b5c0..dfc2e38 100644
--- a/src/profile-handler.cc
+++ b/src/profile-handler.cc
@@ -267,6 +267,11 @@ ProfileHandler::~ProfileHandler() {
 void ProfileHandler::RegisterThread() {
   SpinLockHolder cl(&control_lock_);
 
+#ifdef BUILD_FOR_RUBY
+  timer_sharing_ = TIMERS_SHARED;
+  if (callback_count_ > 0 && !IsTimerRunning())
+    StartTimer();
+#else
   // We try to detect whether timers are being shared by setting a
   // timer in the first call to this function, then checking whether
   // it's set in the second call.
@@ -308,6 +313,7 @@ void ProfileHandler::RegisterThread() {
       StartTimer();
       break;
   }
+#endif
 }
 
 ProfileHandlerToken* ProfileHandler::RegisterCallback(
diff --git a/src/profiledata.cc b/src/profiledata.cc
index 5f2531b..ea95493 100644
--- a/src/profiledata.cc
+++ b/src/profiledata.cc
@@ -56,6 +56,19 @@ const int ProfileData::kAssociativity;
 const int ProfileData::kBuckets;
 const int ProfileData::kBufferLength;
 
+#ifdef BUILD_FOR_RUBY
+extern "C" {
+  typedef unsigned long ID;
+  typedef unsigned long VALUE;
+
+  void rb_gc();
+  const char *rb_id2name(ID);
+  const char *rb_class2name(VALUE);
+}
+
+#include <set>
+#endif
+
 ProfileData::Options::Options()
     : frequency_(1) {
 }
@@ -63,17 +76,33 @@ ProfileData::Options::Options()
 // This function is safe to call from asynchronous signals (but is not
 // re-entrant).  However, that's not part of its public interface.
 void ProfileData::Evict(const Entry& entry) {
+#ifdef BUILD_FOR_RUBY
+  const int d = entry.depth == 1 ? 1 : entry.depth/3;
+#else
   const int d = entry.depth;
+#endif
   const int nslots = d + 2;     // Number of slots needed in eviction buffer
+
   if (num_evicted_ + nslots > kBufferLength) {
     FlushEvicted();
     assert(num_evicted_ == 0);
     assert(nslots <= kBufferLength);
   }
+
   evict_[num_evicted_++] = entry.count;
   evict_[num_evicted_++] = d;
+
+#ifdef BUILD_FOR_RUBY
+  if (entry.depth > 1) {
+    for (int n=0; n<entry.depth; n+=3)
+      evict_[num_evicted_++] = entry.stack[n] + entry.stack[n+1] + entry.stack[n+2];
+  } else if (entry.depth == 1) {
+    evict_[num_evicted_++] = entry.stack[0];
+  }
+#else
   memcpy(&evict_[num_evicted_], entry.stack, d * sizeof(Slot));
   num_evicted_ += d;
+#endif
 }
 
 ProfileData::ProfileData()
@@ -85,6 +114,7 @@ ProfileData::ProfileData()
       evictions_(0),
       total_bytes_(0),
       fname_(0),
+      sym_fname_(0),
       start_time_(0) {
 }
 
@@ -101,6 +131,13 @@ bool ProfileData::Start(const char* fname,
     return false;
   }
 
+#ifdef BUILD_FOR_RUBY
+  int len = strlen(fname);
+  sym_fname_ = (char*)malloc((len+9) * sizeof(char));
+  strncpy(sym_fname_, fname, len);
+  strcpy(sym_fname_+len, ".symbols");
+#endif
+
   start_time_ = time(NULL);
   fname_ = strdup(fname);
 
@@ -166,16 +203,61 @@ void ProfileData::Stop() {
     return;
   }
 
+#ifdef BUILD_FOR_RUBY
+  FILE *symbols;
+  int precision;
+
+  symbols = fopen(sym_fname_, "w");
+  if (!symbols) {
+    fprintf(stderr, "PROFILER ERROR: Unable to open %s (%s)\n", sym_fname_, strerror(errno));
+    Reset();
+    return;
+  }
+
+  precision = sizeof(unsigned long)*2;
+  fprintf(symbols, "%0*lx: garbage_collector\n", precision, (ID)rb_gc);
+
+  std::set<ID> known_symbols;
+#endif
+
   // Move data from hash table to eviction buffer
   for (int b = 0; b < kBuckets; b++) {
     Bucket* bucket = &hash_[b];
     for (int a = 0; a < kAssociativity; a++) {
       if (bucket->entry[a].count > 0) {
-        Evict(bucket->entry[a]);
+        Entry e = bucket->entry[a];
+        Evict(e);
+#ifdef BUILD_FOR_RUBY
+        if (e.depth > 1) {
+          for (int n=0; n<e.depth; n+=3) {
+            VALUE self = e.stack[n];
+            VALUE klass = e.stack[n+1];
+            ID method = e.stack[n+2];
+
+            ID sym = self + klass + method; // unique identifer
+
+            if (known_symbols.find(sym) == known_symbols.end()) {
+              fprintf(symbols, "%0*lx: ", precision, sym);
+
+              if (self) { // class method
+                fprintf(symbols, "%s.%s\n", rb_class2name(self), rb_id2name(method));
+              } else { // instance method
+                fprintf(symbols, "%s#%s\n", rb_class2name(klass), rb_id2name(method));
+              }
+
+              known_symbols.insert(sym);
+            }
+          }
+        }
+#endif
       }
     }
   }
 
+#ifdef BUILD_FOR_RUBY
+  fclose(symbols);
+#endif
+
   if (num_evicted_ + 3 > kBufferLength) {
     // Ensure there is enough room for end of data marker
     FlushEvicted();
@@ -211,6 +293,10 @@ void ProfileData::Reset() {
   num_evicted_ = 0;
   free(fname_);
   fname_ = 0;
+#ifdef BUILD_FOR_RUBY
+  free(sym_fname_);
+  sym_fname_ = 0;
+#endif
   start_time_ = 0;
 
   out_ = -1;
diff --git a/src/profiledata.h b/src/profiledata.h
index 3521bac..2f013e6 100644
--- a/src/profiledata.h
+++ b/src/profiledata.h
@@ -169,6 +169,7 @@ class ProfileData {
   int           evictions_;     // How many evictions
   size_t        total_bytes_;   // How much output
   char*         fname_;         // Profile file name
+  char*         sym_fname_;     // Symbol file name
   time_t        start_time_;    // Start time, or 0
 
   // Move 'entry' to the eviction buffer.
diff --git a/src/profiler.cc b/src/profiler.cc
index a57953e..b38602a 100644
--- a/src/profiler.cc
+++ b/src/profiler.cc
@@ -68,6 +68,12 @@ typedef int ucontext_t;   // just to quiet the compiler, mostly
 #include "conflict-signal.h"          /* used on msvc machines */
 #endif
 
+#ifdef BUILD_FOR_RUBY
+extern "C" {
+  int rb_stack_trace(void**,int);
+}
+#endif
+
 using std::string;
 
 // Collects up all profile data.  This is a singleton, which is
@@ -266,6 +272,10 @@ void CpuProfiler::prof_handler(int sig, siginfo_t*, void* signal_ucontext,
       (*instance->filter_)(instance->filter_arg_)) {
     void* stack[ProfileData::kMaxStackDepth];
 
+#ifdef BUILD_FOR_RUBY
+    int depth = rb_stack_trace(stack, arraysize(stack));
+#else
+
     // The top-most active routine doesn't show up as a normal
     // frame, but as the "pc" value in the signal handler context.
     stack[0] = GetPC(*reinterpret_cast<ucontext_t*>(signal_ucontext));
@@ -279,8 +289,10 @@ void CpuProfiler::prof_handler(int sig, siginfo_t*, void* signal_ucontext,
     int depth = GetStackTraceWithContext(stack + 1, arraysize(stack) - 1,
                                          2, signal_ucontext);
     depth++;  // To account for pc value in stack[0];
+#endif
 
-    instance->collector_.Add(depth, stack);
+    if (depth > 0)
+      instance->collector_.Add(depth, stack);
   }
 }
 
diff --git a/src/stacktrace.cc b/src/stacktrace.cc
index 175cdf5..18b4a79 100644
--- a/src/stacktrace.cc
+++ b/src/stacktrace.cc
@@ -52,6 +52,7 @@
 // correctly when GetStackTrace() is called with max_depth == 0.
 // Some code may do that.
 
+#ifndef BUILD_FOR_RUBY
 #include <config.h>
 #include <google/stacktrace.h>
 #include "stacktrace_config.h"
@@ -108,3 +109,4 @@
 #else
 # error Cannot calculate stack trace: will need to write for your environment
 #endif
+#endif
